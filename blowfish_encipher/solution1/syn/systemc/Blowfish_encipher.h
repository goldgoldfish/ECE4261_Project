// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Blowfish_encipher_HH_
#define _Blowfish_encipher_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Blowfish_encipher_P.h"
#include "Blowfish_encipherbkb.h"
#include "Blowfish_enciphercud.h"
#include "Blowfish_encipherdEe.h"
#include "Blowfish_enciphereOg.h"
#include "Blowfish_encipher_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct Blowfish_encipher : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Blowfish_encipher(sc_module_name name);
    SC_HAS_PROCESS(Blowfish_encipher);

    ~Blowfish_encipher();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Blowfish_encipher_P* P_U;
    Blowfish_encipherbkb* S_0_U;
    Blowfish_enciphercud* S_1_U;
    Blowfish_encipherdEe* S_2_U;
    Blowfish_enciphereOg* S_3_U;
    Blowfish_encipher_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* Blowfish_encipher_AXILiteS_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > xl_i;
    sc_signal< sc_lv<32> > xl_o;
    sc_signal< sc_logic > xl_o_ap_vld;
    sc_signal< sc_lv<32> > xr_i;
    sc_signal< sc_lv<32> > xr_o;
    sc_signal< sc_logic > xr_o_ap_vld;
    sc_signal< sc_lv<5> > P_address0;
    sc_signal< sc_logic > P_ce0;
    sc_signal< sc_lv<31> > P_q0;
    sc_signal< sc_lv<8> > S_0_address0;
    sc_signal< sc_logic > S_0_ce0;
    sc_signal< sc_lv<31> > S_0_q0;
    sc_signal< sc_lv<8> > S_1_address0;
    sc_signal< sc_logic > S_1_ce0;
    sc_signal< sc_lv<32> > S_1_q0;
    sc_signal< sc_lv<8> > S_2_address0;
    sc_signal< sc_logic > S_2_ce0;
    sc_signal< sc_lv<32> > S_2_q0;
    sc_signal< sc_lv<8> > S_3_address0;
    sc_signal< sc_logic > S_3_ce0;
    sc_signal< sc_lv<32> > S_3_q0;
    sc_signal< sc_lv<5> > i_1_fu_185_p2;
    sc_signal< sc_lv<5> > i_1_reg_336;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_fu_179_p2;
    sc_signal< sc_lv<32> > Xl_5_fu_230_p2;
    sc_signal< sc_lv<32> > Xl_5_reg_346;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > y_fu_302_p2;
    sc_signal< sc_lv<32> > y_reg_371;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > S_2_load_reg_376;
    sc_signal< sc_lv<32> > S_3_load_reg_381;
    sc_signal< sc_lv<32> > Xr_5_fu_317_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > Xl_1_reg_148;
    sc_signal< sc_lv<32> > temp_reg_158;
    sc_signal< sc_lv<5> > i_reg_168;
    sc_signal< sc_lv<32> > tmp_fu_191_p1;
    sc_signal< sc_lv<32> > tmp_3_i_fu_278_p1;
    sc_signal< sc_lv<32> > tmp_4_i_fu_283_p1;
    sc_signal< sc_lv<32> > tmp_5_i_fu_288_p1;
    sc_signal< sc_lv<32> > tmp_6_i_fu_293_p1;
    sc_signal< sc_lv<32> > P_load_cast_fu_210_p1;
    sc_signal< sc_lv<24> > tmp_3_fu_222_p1;
    sc_signal< sc_lv<24> > tmp_4_fu_226_p1;
    sc_signal< sc_lv<8> > tmp_1_fu_214_p1;
    sc_signal< sc_lv<8> > tmp_2_fu_218_p1;
    sc_signal< sc_lv<24> > Xl_5_cast_fu_236_p2;
    sc_signal< sc_lv<8> > tmp_5_fu_268_p4;
    sc_signal< sc_lv<8> > b_fu_258_p4;
    sc_signal< sc_lv<8> > c_fu_248_p4;
    sc_signal< sc_lv<8> > d_fu_242_p2;
    sc_signal< sc_lv<32> > S_0_load_cast_fu_298_p1;
    sc_signal< sc_lv<32> > y_1_fu_308_p2;
    sc_signal< sc_lv<32> > y_2_fu_312_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_4770F01;
    static const sc_lv<32> ap_const_lv32_74747276;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_P_address0();
    void thread_P_ce0();
    void thread_P_load_cast_fu_210_p1();
    void thread_S_0_address0();
    void thread_S_0_ce0();
    void thread_S_0_load_cast_fu_298_p1();
    void thread_S_1_address0();
    void thread_S_1_ce0();
    void thread_S_2_address0();
    void thread_S_2_ce0();
    void thread_S_3_address0();
    void thread_S_3_ce0();
    void thread_Xl_5_cast_fu_236_p2();
    void thread_Xl_5_fu_230_p2();
    void thread_Xr_5_fu_317_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_b_fu_258_p4();
    void thread_c_fu_248_p4();
    void thread_d_fu_242_p2();
    void thread_exitcond_fu_179_p2();
    void thread_i_1_fu_185_p2();
    void thread_tmp_1_fu_214_p1();
    void thread_tmp_2_fu_218_p1();
    void thread_tmp_3_fu_222_p1();
    void thread_tmp_3_i_fu_278_p1();
    void thread_tmp_4_fu_226_p1();
    void thread_tmp_4_i_fu_283_p1();
    void thread_tmp_5_fu_268_p4();
    void thread_tmp_5_i_fu_288_p1();
    void thread_tmp_6_i_fu_293_p1();
    void thread_tmp_fu_191_p1();
    void thread_xl_o();
    void thread_xl_o_ap_vld();
    void thread_xr_o();
    void thread_xr_o_ap_vld();
    void thread_y_1_fu_308_p2();
    void thread_y_2_fu_312_p2();
    void thread_y_fu_302_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
