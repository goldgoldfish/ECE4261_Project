-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Blowfish_decipher is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Blowfish_decipher is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Blowfish_decipher,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.578000,HLS_SYN_LAT=65,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=426,HLS_SYN_LUT=652}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_31512227 : STD_LOGIC_VECTOR (31 downto 0) := "00110001010100010010001000100111";
    constant ap_const_lv32_35252C26 : STD_LOGIC_VECTOR (31 downto 0) := "00110101001001010010110000100110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal xl_i : STD_LOGIC_VECTOR (31 downto 0);
    signal xl_o : STD_LOGIC_VECTOR (31 downto 0);
    signal xl_o_ap_vld : STD_LOGIC;
    signal xr_i : STD_LOGIC_VECTOR (31 downto 0);
    signal xr_o : STD_LOGIC_VECTOR (31 downto 0);
    signal xr_o_ap_vld : STD_LOGIC;
    signal P_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal P_ce0 : STD_LOGIC;
    signal P_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal S_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal S_0_ce0 : STD_LOGIC;
    signal S_0_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal S_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal S_1_ce0 : STD_LOGIC;
    signal S_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal S_2_ce0 : STD_LOGIC;
    signal S_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal S_3_ce0 : STD_LOGIC;
    signal S_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_206_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_357 : STD_LOGIC_VECTOR (4 downto 0);
    signal Xl_5_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Xl_5_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal y_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal S_2_load_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_3_load_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal Xr_5_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal Xl_1_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_174 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_185_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal P_load_cast_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_238_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_242_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_230_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_234_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Xl_5_cast_fu_252_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_284_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fu_274_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_fu_264_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_fu_258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal S_0_load_cast_fu_314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component Blowfish_decipher_P IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Blowfish_decipherbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Blowfish_deciphercud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_decipherdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_deciphereOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blowfish_decipher_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        xl_o : IN STD_LOGIC_VECTOR (31 downto 0);
        xl_o_ap_vld : IN STD_LOGIC;
        xl_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        xr_o : IN STD_LOGIC_VECTOR (31 downto 0);
        xr_o_ap_vld : IN STD_LOGIC;
        xr_i : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    P_U : component Blowfish_decipher_P
    generic map (
        DataWidth => 31,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => P_address0,
        ce0 => P_ce0,
        q0 => P_q0);

    S_0_U : component Blowfish_decipherbkb
    generic map (
        DataWidth => 31,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => S_0_address0,
        ce0 => S_0_ce0,
        q0 => S_0_q0);

    S_1_U : component Blowfish_deciphercud
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => S_1_address0,
        ce0 => S_1_ce0,
        q0 => S_1_q0);

    S_2_U : component Blowfish_decipherdEe
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => S_2_address0,
        ce0 => S_2_ce0,
        q0 => S_2_q0);

    S_3_U : component Blowfish_deciphereOg
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => S_3_address0,
        ce0 => S_3_ce0,
        q0 => S_3_q0);

    Blowfish_decipher_AXILiteS_s_axi_U : component Blowfish_decipher_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        xl_o => xl_o,
        xl_o_ap_vld => xl_o_ap_vld,
        xl_i => xl_i,
        xr_o => xr_o,
        xr_o_ap_vld => xr_o_ap_vld,
        xr_i => xr_i);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    Xl_1_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                Xl_1_reg_154 <= Xl_5_reg_362;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                Xl_1_reg_154 <= xr_i;
            end if; 
        end if;
    end process;

    i_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_174 <= i_1_reg_357;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_174 <= ap_const_lv5_11;
            end if; 
        end if;
    end process;

    temp_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                temp_reg_164 <= Xr_5_fu_333_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                temp_reg_164 <= xl_i;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                S_2_load_reg_392 <= S_2_q0;
                S_3_load_reg_397 <= S_3_q0;
                y_reg_387 <= y_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Xl_5_reg_362 <= Xl_5_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_fu_195_p2 = ap_const_lv1_0))) then
                i_1_reg_357 <= i_1_fu_206_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_fu_195_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_fu_195_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    P_address0 <= tmp_7_fu_201_p1(5 - 1 downto 0);

    P_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            P_ce0 <= ap_const_logic_1;
        else 
            P_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P_load_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(P_q0),32));
    S_0_address0 <= tmp_3_i_fu_294_p1(8 - 1 downto 0);

    S_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            S_0_ce0 <= ap_const_logic_1;
        else 
            S_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_0_load_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_0_q0),32));
    S_1_address0 <= tmp_4_i_fu_299_p1(8 - 1 downto 0);

    S_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            S_1_ce0 <= ap_const_logic_1;
        else 
            S_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_2_address0 <= tmp_5_i_fu_304_p1(8 - 1 downto 0);

    S_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            S_2_ce0 <= ap_const_logic_1;
        else 
            S_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_3_address0 <= tmp_6_i_fu_309_p1(8 - 1 downto 0);

    S_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            S_3_ce0 <= ap_const_logic_1;
        else 
            S_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Xl_5_cast_fu_252_p2 <= (tmp_3_fu_238_p1 xor tmp_4_fu_242_p1);
    Xl_5_fu_246_p2 <= (P_load_cast_fu_226_p1 xor temp_reg_164);
    Xr_5_fu_333_p2 <= (y_2_fu_328_p2 xor Xl_1_reg_154);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_fu_195_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_fu_195_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_fu_195_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_fu_195_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    b_fu_274_p4 <= Xl_5_fu_246_p2(23 downto 16);
    c_fu_264_p4 <= Xl_5_cast_fu_252_p2(15 downto 8);
    d_fu_258_p2 <= (tmp_1_fu_230_p1 xor tmp_2_fu_234_p1);
    i_1_fu_206_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(i_reg_174));
    icmp_fu_195_p2 <= "1" when (tmp_fu_185_p4 = ap_const_lv4_0) else "0";
    tmp_1_fu_230_p1 <= P_q0(8 - 1 downto 0);
    tmp_2_fu_234_p1 <= temp_reg_164(8 - 1 downto 0);
    tmp_3_fu_238_p1 <= P_q0(24 - 1 downto 0);
    tmp_3_i_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_284_p4),32));
    tmp_4_fu_242_p1 <= temp_reg_164(24 - 1 downto 0);
    tmp_4_i_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_fu_274_p4),32));
    tmp_5_fu_284_p4 <= Xl_5_fu_246_p2(31 downto 24);
    tmp_5_i_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_264_p4),32));
    tmp_6_i_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_258_p2),32));
    tmp_7_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_174),32));
    tmp_fu_185_p4 <= i_reg_174(4 downto 1);
    xl_o <= (Xl_1_reg_154 xor ap_const_lv32_35252C26);

    xl_o_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_fu_195_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_fu_195_p2 = ap_const_lv1_1))) then 
            xl_o_ap_vld <= ap_const_logic_1;
        else 
            xl_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xr_o <= (temp_reg_164 xor ap_const_lv32_31512227);

    xr_o_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_fu_195_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_fu_195_p2 = ap_const_lv1_1))) then 
            xr_o_ap_vld <= ap_const_logic_1;
        else 
            xr_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_1_fu_324_p2 <= (S_2_load_reg_392 xor y_reg_387);
    y_2_fu_328_p2 <= std_logic_vector(unsigned(S_3_load_reg_397) + unsigned(y_1_fu_324_p2));
    y_fu_318_p2 <= std_logic_vector(unsigned(S_0_load_cast_fu_314_p1) + unsigned(S_1_q0));
end behav;
