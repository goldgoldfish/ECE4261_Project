// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Blowfish_decipher.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Blowfish_decipher::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Blowfish_decipher::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> Blowfish_decipher::ap_ST_fsm_state1 = "1";
const sc_lv<5> Blowfish_decipher::ap_ST_fsm_state2 = "10";
const sc_lv<5> Blowfish_decipher::ap_ST_fsm_state3 = "100";
const sc_lv<5> Blowfish_decipher::ap_ST_fsm_state4 = "1000";
const sc_lv<5> Blowfish_decipher::ap_ST_fsm_state5 = "10000";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_0 = "00000000000000000000000000000000";
const int Blowfish_decipher::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_1 = "1";
const sc_lv<1> Blowfish_decipher::ap_const_lv1_0 = "0";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_2 = "10";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_3 = "11";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_4 = "100";
const sc_lv<5> Blowfish_decipher::ap_const_lv5_11 = "10001";
const sc_lv<1> Blowfish_decipher::ap_const_lv1_1 = "1";
const sc_lv<4> Blowfish_decipher::ap_const_lv4_0 = "0000";
const sc_lv<5> Blowfish_decipher::ap_const_lv5_1F = "11111";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_31512227 = "110001010100010010001000100111";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_35252C26 = "110101001001010010110000100110";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_8 = "1000";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_F = "1111";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_10 = "10000";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_17 = "10111";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_18 = "11000";
const sc_lv<32> Blowfish_decipher::ap_const_lv32_1F = "11111";
const bool Blowfish_decipher::ap_const_boolean_1 = true;

Blowfish_decipher::Blowfish_decipher(sc_module_name name) : sc_module(name), mVcdFile(0) {
    P_U = new Blowfish_decipher_P("P_U");
    P_U->clk(ap_clk);
    P_U->reset(ap_rst_n_inv);
    P_U->address0(P_address0);
    P_U->ce0(P_ce0);
    P_U->q0(P_q0);
    S_0_U = new Blowfish_decipherbkb("S_0_U");
    S_0_U->clk(ap_clk);
    S_0_U->reset(ap_rst_n_inv);
    S_0_U->address0(S_0_address0);
    S_0_U->ce0(S_0_ce0);
    S_0_U->q0(S_0_q0);
    S_1_U = new Blowfish_deciphercud("S_1_U");
    S_1_U->clk(ap_clk);
    S_1_U->reset(ap_rst_n_inv);
    S_1_U->address0(S_1_address0);
    S_1_U->ce0(S_1_ce0);
    S_1_U->q0(S_1_q0);
    S_2_U = new Blowfish_decipherdEe("S_2_U");
    S_2_U->clk(ap_clk);
    S_2_U->reset(ap_rst_n_inv);
    S_2_U->address0(S_2_address0);
    S_2_U->ce0(S_2_ce0);
    S_2_U->q0(S_2_q0);
    S_3_U = new Blowfish_deciphereOg("S_3_U");
    S_3_U->clk(ap_clk);
    S_3_U->reset(ap_rst_n_inv);
    S_3_U->address0(S_3_address0);
    S_3_U->ce0(S_3_ce0);
    S_3_U->q0(S_3_q0);
    Blowfish_decipher_AXILiteS_s_axi_U = new Blowfish_decipher_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("Blowfish_decipher_AXILiteS_s_axi_U");
    Blowfish_decipher_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    Blowfish_decipher_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    Blowfish_decipher_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    Blowfish_decipher_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    Blowfish_decipher_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    Blowfish_decipher_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    Blowfish_decipher_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    Blowfish_decipher_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    Blowfish_decipher_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    Blowfish_decipher_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    Blowfish_decipher_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    Blowfish_decipher_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    Blowfish_decipher_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    Blowfish_decipher_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    Blowfish_decipher_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    Blowfish_decipher_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    Blowfish_decipher_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    Blowfish_decipher_AXILiteS_s_axi_U->ACLK(ap_clk);
    Blowfish_decipher_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    Blowfish_decipher_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    Blowfish_decipher_AXILiteS_s_axi_U->ap_start(ap_start);
    Blowfish_decipher_AXILiteS_s_axi_U->interrupt(interrupt);
    Blowfish_decipher_AXILiteS_s_axi_U->ap_ready(ap_ready);
    Blowfish_decipher_AXILiteS_s_axi_U->ap_done(ap_done);
    Blowfish_decipher_AXILiteS_s_axi_U->ap_idle(ap_idle);
    Blowfish_decipher_AXILiteS_s_axi_U->xl_o(xl_o);
    Blowfish_decipher_AXILiteS_s_axi_U->xl_o_ap_vld(xl_o_ap_vld);
    Blowfish_decipher_AXILiteS_s_axi_U->xl_i(xl_i);
    Blowfish_decipher_AXILiteS_s_axi_U->xr_o(xr_o);
    Blowfish_decipher_AXILiteS_s_axi_U->xr_o_ap_vld(xr_o_ap_vld);
    Blowfish_decipher_AXILiteS_s_axi_U->xr_i(xr_i);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_P_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_7_fu_201_p1 );

    SC_METHOD(thread_P_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_P_load_cast_fu_226_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_S_0_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_3_i_fu_294_p1 );

    SC_METHOD(thread_S_0_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_S_0_load_cast_fu_314_p1);
    sensitive << ( S_0_q0 );

    SC_METHOD(thread_S_1_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_i_fu_299_p1 );

    SC_METHOD(thread_S_1_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_S_2_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_i_fu_304_p1 );

    SC_METHOD(thread_S_2_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_S_3_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_6_i_fu_309_p1 );

    SC_METHOD(thread_S_3_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Xl_5_cast_fu_252_p2);
    sensitive << ( tmp_3_fu_238_p1 );
    sensitive << ( tmp_4_fu_242_p1 );

    SC_METHOD(thread_Xl_5_fu_246_p2);
    sensitive << ( temp_reg_164 );
    sensitive << ( P_load_cast_fu_226_p1 );

    SC_METHOD(thread_Xr_5_fu_333_p2);
    sensitive << ( Xl_1_reg_154 );
    sensitive << ( y_2_fu_328_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_fu_195_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_fu_195_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_b_fu_274_p4);
    sensitive << ( Xl_5_fu_246_p2 );

    SC_METHOD(thread_c_fu_264_p4);
    sensitive << ( Xl_5_cast_fu_252_p2 );

    SC_METHOD(thread_d_fu_258_p2);
    sensitive << ( tmp_1_fu_230_p1 );
    sensitive << ( tmp_2_fu_234_p1 );

    SC_METHOD(thread_i_1_fu_206_p2);
    sensitive << ( i_reg_174 );

    SC_METHOD(thread_icmp_fu_195_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_185_p4 );

    SC_METHOD(thread_tmp_1_fu_230_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_tmp_2_fu_234_p1);
    sensitive << ( temp_reg_164 );

    SC_METHOD(thread_tmp_3_fu_238_p1);
    sensitive << ( P_q0 );

    SC_METHOD(thread_tmp_3_i_fu_294_p1);
    sensitive << ( tmp_5_fu_284_p4 );

    SC_METHOD(thread_tmp_4_fu_242_p1);
    sensitive << ( temp_reg_164 );

    SC_METHOD(thread_tmp_4_i_fu_299_p1);
    sensitive << ( b_fu_274_p4 );

    SC_METHOD(thread_tmp_5_fu_284_p4);
    sensitive << ( Xl_5_fu_246_p2 );

    SC_METHOD(thread_tmp_5_i_fu_304_p1);
    sensitive << ( c_fu_264_p4 );

    SC_METHOD(thread_tmp_6_i_fu_309_p1);
    sensitive << ( d_fu_258_p2 );

    SC_METHOD(thread_tmp_7_fu_201_p1);
    sensitive << ( i_reg_174 );

    SC_METHOD(thread_tmp_fu_185_p4);
    sensitive << ( i_reg_174 );

    SC_METHOD(thread_xl_o);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_fu_195_p2 );
    sensitive << ( Xl_1_reg_154 );

    SC_METHOD(thread_xl_o_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_fu_195_p2 );

    SC_METHOD(thread_xr_o);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_fu_195_p2 );
    sensitive << ( temp_reg_164 );

    SC_METHOD(thread_xr_o_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_fu_195_p2 );

    SC_METHOD(thread_y_1_fu_324_p2);
    sensitive << ( y_reg_387 );
    sensitive << ( S_2_load_reg_392 );

    SC_METHOD(thread_y_2_fu_328_p2);
    sensitive << ( S_3_load_reg_397 );
    sensitive << ( y_1_fu_324_p2 );

    SC_METHOD(thread_y_fu_318_p2);
    sensitive << ( S_1_q0 );
    sensitive << ( S_0_load_cast_fu_314_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_fu_195_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Blowfish_decipher_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, xl_i, "xl_i");
    sc_trace(mVcdFile, xl_o, "xl_o");
    sc_trace(mVcdFile, xl_o_ap_vld, "xl_o_ap_vld");
    sc_trace(mVcdFile, xr_i, "xr_i");
    sc_trace(mVcdFile, xr_o, "xr_o");
    sc_trace(mVcdFile, xr_o_ap_vld, "xr_o_ap_vld");
    sc_trace(mVcdFile, P_address0, "P_address0");
    sc_trace(mVcdFile, P_ce0, "P_ce0");
    sc_trace(mVcdFile, P_q0, "P_q0");
    sc_trace(mVcdFile, S_0_address0, "S_0_address0");
    sc_trace(mVcdFile, S_0_ce0, "S_0_ce0");
    sc_trace(mVcdFile, S_0_q0, "S_0_q0");
    sc_trace(mVcdFile, S_1_address0, "S_1_address0");
    sc_trace(mVcdFile, S_1_ce0, "S_1_ce0");
    sc_trace(mVcdFile, S_1_q0, "S_1_q0");
    sc_trace(mVcdFile, S_2_address0, "S_2_address0");
    sc_trace(mVcdFile, S_2_ce0, "S_2_ce0");
    sc_trace(mVcdFile, S_2_q0, "S_2_q0");
    sc_trace(mVcdFile, S_3_address0, "S_3_address0");
    sc_trace(mVcdFile, S_3_ce0, "S_3_ce0");
    sc_trace(mVcdFile, S_3_q0, "S_3_q0");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_fu_195_p2, "icmp_fu_195_p2");
    sc_trace(mVcdFile, i_1_fu_206_p2, "i_1_fu_206_p2");
    sc_trace(mVcdFile, i_1_reg_357, "i_1_reg_357");
    sc_trace(mVcdFile, Xl_5_fu_246_p2, "Xl_5_fu_246_p2");
    sc_trace(mVcdFile, Xl_5_reg_362, "Xl_5_reg_362");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, y_fu_318_p2, "y_fu_318_p2");
    sc_trace(mVcdFile, y_reg_387, "y_reg_387");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, S_2_load_reg_392, "S_2_load_reg_392");
    sc_trace(mVcdFile, S_3_load_reg_397, "S_3_load_reg_397");
    sc_trace(mVcdFile, Xr_5_fu_333_p2, "Xr_5_fu_333_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, Xl_1_reg_154, "Xl_1_reg_154");
    sc_trace(mVcdFile, temp_reg_164, "temp_reg_164");
    sc_trace(mVcdFile, i_reg_174, "i_reg_174");
    sc_trace(mVcdFile, tmp_7_fu_201_p1, "tmp_7_fu_201_p1");
    sc_trace(mVcdFile, tmp_3_i_fu_294_p1, "tmp_3_i_fu_294_p1");
    sc_trace(mVcdFile, tmp_4_i_fu_299_p1, "tmp_4_i_fu_299_p1");
    sc_trace(mVcdFile, tmp_5_i_fu_304_p1, "tmp_5_i_fu_304_p1");
    sc_trace(mVcdFile, tmp_6_i_fu_309_p1, "tmp_6_i_fu_309_p1");
    sc_trace(mVcdFile, tmp_fu_185_p4, "tmp_fu_185_p4");
    sc_trace(mVcdFile, P_load_cast_fu_226_p1, "P_load_cast_fu_226_p1");
    sc_trace(mVcdFile, tmp_3_fu_238_p1, "tmp_3_fu_238_p1");
    sc_trace(mVcdFile, tmp_4_fu_242_p1, "tmp_4_fu_242_p1");
    sc_trace(mVcdFile, tmp_1_fu_230_p1, "tmp_1_fu_230_p1");
    sc_trace(mVcdFile, tmp_2_fu_234_p1, "tmp_2_fu_234_p1");
    sc_trace(mVcdFile, Xl_5_cast_fu_252_p2, "Xl_5_cast_fu_252_p2");
    sc_trace(mVcdFile, tmp_5_fu_284_p4, "tmp_5_fu_284_p4");
    sc_trace(mVcdFile, b_fu_274_p4, "b_fu_274_p4");
    sc_trace(mVcdFile, c_fu_264_p4, "c_fu_264_p4");
    sc_trace(mVcdFile, d_fu_258_p2, "d_fu_258_p2");
    sc_trace(mVcdFile, S_0_load_cast_fu_314_p1, "S_0_load_cast_fu_314_p1");
    sc_trace(mVcdFile, y_1_fu_324_p2, "y_1_fu_324_p2");
    sc_trace(mVcdFile, y_2_fu_328_p2, "y_2_fu_328_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Blowfish_decipher.hdltvin.dat");
    mHdltvoutHandle.open("Blowfish_decipher.hdltvout.dat");
}

Blowfish_decipher::~Blowfish_decipher() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete P_U;
    delete S_0_U;
    delete S_1_U;
    delete S_2_U;
    delete S_3_U;
    delete Blowfish_decipher_AXILiteS_s_axi_U;
}

void Blowfish_decipher::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Blowfish_decipher::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        Xl_1_reg_154 = Xl_5_reg_362.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        Xl_1_reg_154 = xr_i.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_reg_174 = i_1_reg_357.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_174 = ap_const_lv5_11;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        temp_reg_164 = Xr_5_fu_333_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        temp_reg_164 = xl_i.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        S_2_load_reg_392 = S_2_q0.read();
        S_3_load_reg_397 = S_3_q0.read();
        y_reg_387 = y_fu_318_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Xl_5_reg_362 = Xl_5_fu_246_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_fu_195_p2.read(), ap_const_lv1_0))) {
        i_1_reg_357 = i_1_fu_206_p2.read();
    }
}

void Blowfish_decipher::thread_P_address0() {
    P_address0 =  (sc_lv<5>) (tmp_7_fu_201_p1.read());
}

void Blowfish_decipher::thread_P_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        P_ce0 = ap_const_logic_1;
    } else {
        P_ce0 = ap_const_logic_0;
    }
}

void Blowfish_decipher::thread_P_load_cast_fu_226_p1() {
    P_load_cast_fu_226_p1 = esl_zext<32,31>(P_q0.read());
}

void Blowfish_decipher::thread_S_0_address0() {
    S_0_address0 =  (sc_lv<8>) (tmp_3_i_fu_294_p1.read());
}

void Blowfish_decipher::thread_S_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        S_0_ce0 = ap_const_logic_1;
    } else {
        S_0_ce0 = ap_const_logic_0;
    }
}

void Blowfish_decipher::thread_S_0_load_cast_fu_314_p1() {
    S_0_load_cast_fu_314_p1 = esl_zext<32,31>(S_0_q0.read());
}

void Blowfish_decipher::thread_S_1_address0() {
    S_1_address0 =  (sc_lv<8>) (tmp_4_i_fu_299_p1.read());
}

void Blowfish_decipher::thread_S_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        S_1_ce0 = ap_const_logic_1;
    } else {
        S_1_ce0 = ap_const_logic_0;
    }
}

void Blowfish_decipher::thread_S_2_address0() {
    S_2_address0 =  (sc_lv<8>) (tmp_5_i_fu_304_p1.read());
}

void Blowfish_decipher::thread_S_2_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        S_2_ce0 = ap_const_logic_1;
    } else {
        S_2_ce0 = ap_const_logic_0;
    }
}

void Blowfish_decipher::thread_S_3_address0() {
    S_3_address0 =  (sc_lv<8>) (tmp_6_i_fu_309_p1.read());
}

void Blowfish_decipher::thread_S_3_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        S_3_ce0 = ap_const_logic_1;
    } else {
        S_3_ce0 = ap_const_logic_0;
    }
}

void Blowfish_decipher::thread_Xl_5_cast_fu_252_p2() {
    Xl_5_cast_fu_252_p2 = (tmp_3_fu_238_p1.read() ^ tmp_4_fu_242_p1.read());
}

void Blowfish_decipher::thread_Xl_5_fu_246_p2() {
    Xl_5_fu_246_p2 = (P_load_cast_fu_226_p1.read() ^ temp_reg_164.read());
}

void Blowfish_decipher::thread_Xr_5_fu_333_p2() {
    Xr_5_fu_333_p2 = (y_2_fu_328_p2.read() ^ Xl_1_reg_154.read());
}

void Blowfish_decipher::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Blowfish_decipher::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Blowfish_decipher::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Blowfish_decipher::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Blowfish_decipher::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Blowfish_decipher::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_fu_195_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Blowfish_decipher::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Blowfish_decipher::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_fu_195_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Blowfish_decipher::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Blowfish_decipher::thread_b_fu_274_p4() {
    b_fu_274_p4 = Xl_5_fu_246_p2.read().range(23, 16);
}

void Blowfish_decipher::thread_c_fu_264_p4() {
    c_fu_264_p4 = Xl_5_cast_fu_252_p2.read().range(15, 8);
}

void Blowfish_decipher::thread_d_fu_258_p2() {
    d_fu_258_p2 = (tmp_1_fu_230_p1.read() ^ tmp_2_fu_234_p1.read());
}

void Blowfish_decipher::thread_i_1_fu_206_p2() {
    i_1_fu_206_p2 = (!ap_const_lv5_1F.is_01() || !i_reg_174.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_1F) + sc_biguint<5>(i_reg_174.read()));
}

void Blowfish_decipher::thread_icmp_fu_195_p2() {
    icmp_fu_195_p2 = (!tmp_fu_185_p4.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_185_p4.read() == ap_const_lv4_0);
}

void Blowfish_decipher::thread_tmp_1_fu_230_p1() {
    tmp_1_fu_230_p1 = P_q0.read().range(8-1, 0);
}

void Blowfish_decipher::thread_tmp_2_fu_234_p1() {
    tmp_2_fu_234_p1 = temp_reg_164.read().range(8-1, 0);
}

void Blowfish_decipher::thread_tmp_3_fu_238_p1() {
    tmp_3_fu_238_p1 = P_q0.read().range(24-1, 0);
}

void Blowfish_decipher::thread_tmp_3_i_fu_294_p1() {
    tmp_3_i_fu_294_p1 = esl_zext<32,8>(tmp_5_fu_284_p4.read());
}

void Blowfish_decipher::thread_tmp_4_fu_242_p1() {
    tmp_4_fu_242_p1 = temp_reg_164.read().range(24-1, 0);
}

void Blowfish_decipher::thread_tmp_4_i_fu_299_p1() {
    tmp_4_i_fu_299_p1 = esl_zext<32,8>(b_fu_274_p4.read());
}

void Blowfish_decipher::thread_tmp_5_fu_284_p4() {
    tmp_5_fu_284_p4 = Xl_5_fu_246_p2.read().range(31, 24);
}

void Blowfish_decipher::thread_tmp_5_i_fu_304_p1() {
    tmp_5_i_fu_304_p1 = esl_zext<32,8>(c_fu_264_p4.read());
}

void Blowfish_decipher::thread_tmp_6_i_fu_309_p1() {
    tmp_6_i_fu_309_p1 = esl_zext<32,8>(d_fu_258_p2.read());
}

void Blowfish_decipher::thread_tmp_7_fu_201_p1() {
    tmp_7_fu_201_p1 = esl_zext<32,5>(i_reg_174.read());
}

void Blowfish_decipher::thread_tmp_fu_185_p4() {
    tmp_fu_185_p4 = i_reg_174.read().range(4, 1);
}

void Blowfish_decipher::thread_xl_o() {
    xl_o = (Xl_1_reg_154.read() ^ ap_const_lv32_35252C26);
}

void Blowfish_decipher::thread_xl_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_fu_195_p2.read(), ap_const_lv1_1))) {
        xl_o_ap_vld = ap_const_logic_1;
    } else {
        xl_o_ap_vld = ap_const_logic_0;
    }
}

void Blowfish_decipher::thread_xr_o() {
    xr_o = (temp_reg_164.read() ^ ap_const_lv32_31512227);
}

void Blowfish_decipher::thread_xr_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_fu_195_p2.read(), ap_const_lv1_1))) {
        xr_o_ap_vld = ap_const_logic_1;
    } else {
        xr_o_ap_vld = ap_const_logic_0;
    }
}

void Blowfish_decipher::thread_y_1_fu_324_p2() {
    y_1_fu_324_p2 = (S_2_load_reg_392.read() ^ y_reg_387.read());
}

void Blowfish_decipher::thread_y_2_fu_328_p2() {
    y_2_fu_328_p2 = (!S_3_load_reg_397.read().is_01() || !y_1_fu_324_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_3_load_reg_397.read()) + sc_biguint<32>(y_1_fu_324_p2.read()));
}

void Blowfish_decipher::thread_y_fu_318_p2() {
    y_fu_318_p2 = (!S_0_load_cast_fu_314_p1.read().is_01() || !S_1_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(S_0_load_cast_fu_314_p1.read()) + sc_biguint<32>(S_1_q0.read()));
}

void Blowfish_decipher::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_fu_195_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void Blowfish_decipher::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

