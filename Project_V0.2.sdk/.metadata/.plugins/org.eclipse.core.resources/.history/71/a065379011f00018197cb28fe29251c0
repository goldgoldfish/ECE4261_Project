/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

#include <stdio.h>
#include <string.h>

#include "lwip/err.h"
#include "lwip/udp.h"
#include "lwip/tcp.h"
#if defined (__arm__) || defined (__aarch64__)
#include "xil_printf.h"
#endif

err_t accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err);

int transfer_data_old(){
	return 0;
}

int transfer_data(char *data_array) {
	err_t wr_err = ERR_OK;
	struct tcp_pcb *l_tcp_pcb;
	unsigned port = 7;
	ip_addr_t dest_ip = { ((u32_t)0x0B01A8C0UL) }; //this is 192.168.1.11
	ip_addr_t local_ip = { ((u32_t)0x0A01A8C0UL) }; //this is 192.168.1.10

	int length = 0;
	int i = 0;
	while (data_array[i]){
		length++;
		i++;
	} //end while

	xil_printf("Length is: %d.\r\n", length);

	struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);

	/* create new TCP PCB structure */
	l_tcp_pcb = tcp_new();
	if (!l_tcp_pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	} //end if

	wr_err = tcp_bind(l_tcp_pcb, &local_ip, port);
	if (wr_err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n\r", port, wr_err);
		return -2;
	} //end if


	wr_err = tcp_connect(l_tcp_pcb, &dest_ip, 7, NULL); //the NULL can be changed for a callback function
	if (wr_err != ERR_OK) {
		xil_printf("Unable to connect %d: err = %d\n\r", port, wr_err);
		return -2;
	} //end if

	//Sending Data
	tcp_sent(l_tcp_pcb, NULL); //the NULL can be changed for a callback function
	//tcp_sent(l_tcp_pcb, accept_callback(NULL, l_tcp_pcb, wr_err)); //the NULL can be changed for a callback function

	//unsigned char buffer_send[1024] = "My Name Is TCP";
	p->payload = data_array;
	p->len = length;
	p->tot_len = 1024;

	xil_printf("Attempting to send TCP packet.\r\n");

	wr_err = ERR_OK;

	xil_printf("Length is: %d.\r\n", p->len);
	xil_printf("String is: %s.\r\n", p->payload);

	if (tcp_sndbuf(l_tcp_pcb) > p->len) {
		wr_err = tcp_write(l_tcp_pcb, p->payload, p->len, 1);
	} else
		xil_printf("no space in tcp_sndbuf\n\r");

	wr_err = tcp_output(l_tcp_pcb);
	if (wr_err != ERR_OK){
		xil_printf("Unable to output on %d: err = %d\n\r", port, wr_err);
		return -2;
	} //end if

	if(wr_err == ERR_OK){
		p->len++;
	} //end if

	pbuf_free(p);

	tcp_close(l_tcp_pcb);

	return 1;

}

void print_app_header()
{
	xil_printf("\n\r\n\r-----lwIP TCP echo server ------\n\r");
	xil_printf("TCP packets sent to port 6001 will be echoed back\n\r");
}

int start_UDP()
{
	const int udp_data_size = 1280;
	struct udp_pcb *pcb;
	err_t err;
	unsigned port = 7;

	struct ip_addr dest_ip; //this is 192.168.1.11
	struct ip_addr  local_ip; //this is 192.168.1.10

	/*
	ip_addr_t dest_ip = { ((u32_t)0x0B01A8C0UL) }; //this is 192.168.1.11
	ip_addr_t local_ip = { ((u32_t)0x0A01A8C0UL) }; //this is 192.168.1.10
	*/

	IP4_ADDR(&local_ip,   192,168,1,10);
	IP4_ADDR(&dest_ip,   192,168,1,11);

	char test_string = "Testing UDP123";

	u16_t length = strlen(test_string);

	/* create new UDP PCB structure */
	pcb = udp_new();
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}

	err = udp_bind(pcb, IP_ADDR_ANY, port);
	if (err != ERR_OK){
		xil_printf("Unable to bind to %d: err = %d\n\r", port, err);
		return -2;
	} //end if

	err = udp_connect(pcb, &dest_ip, port);
	if (err != ERR_OK){
		xil_printf("Unable to connect to %d: err = %d\n\r", port, err);
		return -2;
	} //end if

	xil_printf("UDP sending server started @ port %d\n\r", port);

	struct pbuf *p;
	p = pbuf_alloc(PBUF_TRANSPORT, udp_data_size, PBUF_RAM);

//	p->payload = &test_string;
//	p->len = length;
//	p->tot_len = length;

	int count = 10;

	while(count){
		memcpy(p->payload,test_string,udp_data_size);
		err = udp_send(pcb, p);
		if (err != ERR_OK){
			xil_printf("Unable to send UDP packet: err = %d\n\r", err);
			return -2;
		} //end if
		count--;
		xil_printf("Count is: %d\n\r", count);
		usleep(1000);
	} //end while

	xil_printf("Done\n\r");

	return 0;
}
