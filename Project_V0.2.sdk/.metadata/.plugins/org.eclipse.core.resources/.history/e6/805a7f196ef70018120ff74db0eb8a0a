/*===========================================================================================
 * Filename: echo.c
 *
 * Authors: Kyle O'Hara & Ben Wedemire
 * Student IDs: 3532550 & 3515624
 * Date: 2018/12/3
 *
 * Description: main.c contains the hardware initialization, IP initializations,
 * 				encrypting/decrypting function calls, keypad functionality, UDP function
 * 				calls, library includes, defines and variable initializations
 *
 ==========================================================================================*/

#include <stdio.h>
#include <string.h>

#include "lwip/err.h"
#include "lwip/udp.h"
#include "lwip/tcp.h"
#if defined (__arm__) || defined (__aarch64__)
#include "xil_printf.h"
#endif

int transfer_data(){
	return 0;
} //end transfer data

void print_app_header() {
	xil_printf("UDP packets sent to port 7\n\r");
} //end print_app_header

int start_UDP(char *data_array) {
	int udp_data_size = strlen(data_array);
	struct udp_pcb *pcb;
	err_t err;
	unsigned port = 7;

	struct ip_addr dest_ip; //this is 192.168.1.11
	struct ip_addr  local_ip; //this is 192.168.1.10

	IP4_ADDR(&local_ip,   192,168,1,10);
	IP4_ADDR(&dest_ip,   192,168,1,11);

	/* create new UDP PCB structure */
	pcb = udp_new();
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	} //end if

	err = udp_bind(pcb, IP_ADDR_ANY, port);
	if (err != ERR_OK){
		xil_printf("Unable to bind to %d: err = %d\n\r", port, err);
		return -2;
	} //end if

	err = udp_connect(pcb, &dest_ip, port);
	if (err != ERR_OK){
		xil_printf("Unable to connect to %d: err = %d\n\r", port, err);
		return -2;
	} //end if

	xil_printf("UDP sending server started @ port %d\n\r", port);

	struct pbuf *p;


	p = pbuf_alloc(PBUF_TRANSPORT, udp_data_size, PBUF_RAM);
	memcpy(p->payload,data_array,udp_data_size);
	err = udp_send(pcb, p);
	if (err != ERR_OK){
		xil_printf("Unable to send UDP packet: err = %d\n\r", err);
		return -2;
	} //end if

	usleep(1000);

	pbuf_free(p);

	xil_printf("Done\n\r");

	sleep(5);

	udp_remove(pcb);
	udp_disconnect(pcb);

	return 0;
} //end start_UDP
